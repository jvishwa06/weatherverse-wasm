@page "/counter"
@inject WeatherService WeatherService
@inject NavigationManager Navigation

<h3 class="blue-heading">Favorite Cities</h3>

@if (FavoriteCities.Count > 0)

{
    <div class="button-container">
        @foreach (var city in FavoriteCities)

        {
            <button @onclick="() => OnCityClick(city)">
                @city
            </button>
        }
    </div>
}

else

{
    <p>No favorite cities found.</p>
}

@if (WeatherDataList.Count > 0)

{
    <h4 class="blue-heading">Weather Data for @SelectedCity</h4>
    <table>
        <thead>
            <tr>
                <th>City</th>
                <th>Temperature (°C)</th>
                <th>Humidity (%)</th>
                <th>Pressure (hPa)</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var weather in WeatherDataList)

            {
                <tr>
                    <td>@weather.Name</td>
                    <td>@weather.Main?.Temp</td>
                    <td>@weather.Main?.Humidity</td>
                    <td>@weather.Main?.Pressure</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<string> FavoriteCities { get; set; } = new List<string>();

    private List<WeatherResponse> WeatherDataList { get; set; } = new List<WeatherResponse>();

    private string SelectedCity { get; set; } = string.Empty;



    // Fetch favorite cities from the backend when the page loads

    private async Task GetFavoriteCities()

    {

        try

        {

            // Example API call to get favorite cities

            FavoriteCities = await WeatherService.GetFavoriteCitiesFromApi();

        }

        catch (Exception ex)

        {

            // Handle errors (e.g., show an error message if API fails)

            Console.WriteLine($"Error fetching favorite cities: {ex.Message}");

        }

    }



    // Method to handle city button click

    private async Task OnCityClick(string city)

    {

        SelectedCity = city;

        WeatherDataList.Clear(); // Clear any previous weather data



        try

        {

            // Fetch weather data for the selected city

            var weatherResponse = await WeatherService.GetWeatherAsync(city);



            if (weatherResponse != null)

            {

                // Add the new weather data to the list

                WeatherDataList.Add(weatherResponse);

            }

            else

            {

                Console.WriteLine($"Weather data for {city} is not available.");

            }

        }

        catch (Exception ex)

        {

            Console.WriteLine($"Error fetching weather data for {city}: {ex.Message}");

        }

    }



    // Load the favorite cities on page initialization

    protected override async Task OnInitializedAsync()

    {

        await GetFavoriteCities();

    }
}

<style>
    h3, h4 {
        color: white; 
        font-size: 24px;
        margin-bottom: 15px;
        padding-left: 10px; /* Consistent padding */
    }

    /* Set the background image */
    body {
        background-image: url('images/deerpurple.jpg'); /* Ensure this path is correct relative to wwwroot */
        background-size: cover;
        background-position: center;
        background-attachment: fixed;
        margin: 0;
        padding: 0;
        height: 100vh; /* Ensures the background covers the entire viewport */
    }

    h4 {
        font-size: 22px; /* Slightly smaller than h3 */
        margin-top: 40px; /* Increased margin-top to create more space between buttons and weather data text */
    }

    .button-container {
        display: flex;
        flex-wrap: wrap;
        gap: 10px;
        margin-top: 30px; /* Increased margin-top for better spacing */
    }

    button {
        padding: 5px 15px; /* Smaller padding */
        font-size: 14px; /* Smaller font size */
        color: #fff;
        background-color: black;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        transition: background-color 0.3s ease;
    }

        button:hover {
            background-color: black;
        }

    p {
        font-size: 16px;
        color: gray;
        margin-top: 30px; /* Increased margin-top for spacing */
    }

    table {
        width: 100%;
        border-collapse: collapse;
        margin: 30px 0; /* Increased margin-top and bottom for better spacing */
        font-size: 16px;
        text-align: left;
        border: 1px solid black;
    }

    th, td {
        padding: 12px 15px;
        border: 1px solid #ddd;
        color: white; /* This makes the table text white */
    }

    th {
        background-color: black;
        color: white;
    }

    tr:nth-child(even) {
        background-color: #f2f2f2;
    }

</style>
    